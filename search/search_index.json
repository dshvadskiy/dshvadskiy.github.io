{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello I am Dmitriy Shvadskiy","text":"<p>I'm a independent consultant specializing in AI implementation and optimization, and building custom AI solutions.</p>"},{"location":"#services","title":"Services","text":"<p>I specialize in providing services to the companies looking to implement AI solutions</p> <ul> <li>AI Implementation: Create secure and scalable AI solutions tailored to your business needs</li> <li>Build mesurable success metrics: Implement metrics to track the success of AI solutions and provide clear impact on your business</li> <li>Complex documents processing: Extracting and analyzing information from complex documents like contracts, invoices, and reports</li> <li>Performance Optimization: Dealing with slow response times and high costs in production systems</li> <li>Quality Control: Maintaining consistency and reliability in AI-powered features</li> </ul> <p>Read the Blog</p>"},{"location":"blog/","title":"Blog","text":"<p>Welcome to my technical blog where I share insights about:</p> <ul> <li>AI System Design and Implementation</li> <li>Personal Projects</li> </ul>"},{"location":"blog/#featured-posts","title":"Featured Posts","text":""},{"location":"blog/2025/03/15/supercharge-your-llms-with-personal-data-using-model-context-protocol/","title":"Supercharge Your LLMs with Personal Data Using Model Context Protocol","text":"<p>Model Context Protocol (MCP) is an open protocol that standardizes how applications provide context to LLMs. It was originally created by Anthropic and released in late 2024. MCP protocol allows an application (MCP Host) to connect to multiple MCP Servers that expose specific capabilities through the standardized Model Context Protocol . </p> <p> </p> MCP Architecture Overview <p>Over the last few months multiple vedndor and open source projects have started to implement MCP in their products. That includes populat development tools like Cursor, Windsurf, and Cline. Open sourece community embraced MCP and started to build MCP servers catalogue. MCP was a hot topic at the 2025 AI Engineer Summit in New York City with several presentations and workshops covering this topic.</p>","tags":["MCP","LLM"]},{"location":"blog/2025/03/15/supercharge-your-llms-with-personal-data-using-model-context-protocol/#getting-started-with-mcp","title":"Getting started with MCP","text":"<p>Anthropic has created a set of SDKs and tools to help developers integrate MCP in their applications.  MCP SDKs that covers the basics of MCP. </p>","tags":["MCP","LLM"]},{"location":"blog/2025/03/15/supercharge-your-llms-with-personal-data-using-model-context-protocol/#connecting-with-your-personal-data","title":"Connecting with your personal data","text":"<p>For the last several month I have been using Garmin Venu 3 watch to track my fitness activities and sleep. Venu 3 tracks heart rate, steps, and sleep, activities, and other metrics. Garmin Connect is the platform that syncs data from the watch to the cloud and allows to view it. It also provides an API to access and download your data.  garminconnect is a Python wrapper to access Garmin Connect API. </p> <p>Source code for this blog post is available here. To get started clone the repossitory and follow the instructions in the README.md file. Once you created Garmin connect API token the the MCP server part us very straightforward. </p> <pre><code>from mcp.server.fastmcp import FastMCP\n\napi = init_api(email, password)\n\n# Create an MCP server\nmcp = FastMCP(\"Garmin Connect MCP Server\")\n\n@mcp.tool()\ndef fetch_sleep_data(date: str) -&gt; dict:\n    \"\"\"Returns sleep data for a given date\n    Args:\n        date: str - date in format YYYY-MM-DD\n    Returns:\n        dict - sleep data\n    \"\"\"\n    return api.get_sleep_data(date)\n\n@mcp.tool()\ndef fetch_heart_rate_data(date: str) -&gt; dict:\n    \"\"\"Returns heart rate data for a given date\n    Args:\n        date: str - date in format YYYY-MM-DD\n    Returns:\n        dict - heart rate data\n    \"\"\"\n    return api.get_rhr_day(date)\n</code></pre> <p>To test the server in MCP Inspector</p> <p>Test your server using MCP Inspector: <pre><code>mcp dev garmin_mcp_server.py\n</code></pre></p> <p> </p> MCP Inspector <p>Register with Claude Desktop: <pre><code>mcp install garmin_mcp_server.py\n</code></pre></p> <p>After restarting Claude Desktop, your MCP server appears in the available servers list:</p> <p> </p> MCP Server in Claude Desktop <p>Let's try to ask Claude to suggest some activities for me.</p> <p> </p> MCP Server Authorization <p>Claude Desktop makes several calls to fetch activities, stress, and heart rate data and gemerates some suggestions.</p> <p> </p> AI-Generated Exercise Recommendations <p>And there you have it - with minimal code, we've connected personal fitness data to an LLM, enabling AI-powered insights tailored specifically to you. The possibilities are endless - from workout planning to sleep optimization, all powered by your personal data through MCP.</p> <p>References:</p> <ul> <li> <p>Source code repo</p> </li> <li> <p>Model Context Protocol Documentation</p> </li> <li> <p>Garmin Connect API Python Library</p> </li> </ul>","tags":["MCP","LLM"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/mcp/","title":"MCP","text":""}]}